# Generated by Django 4.2.3 on 2023-07-18 05:30

import django.contrib.gis.db.models.fields
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AuthGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150, unique=True)),
            ],
            options={
                'db_table': 'auth_group',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthGroupPermissions',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'auth_group_permissions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthPermission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('codename', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'auth_permission',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128)),
                ('last_login', models.DateTimeField(blank=True, null=True)),
                ('is_superuser', models.BooleanField()),
                ('username', models.CharField(max_length=150, unique=True)),
                ('first_name', models.CharField(max_length=150)),
                ('last_name', models.CharField(max_length=150)),
                ('email', models.CharField(max_length=254)),
                ('is_staff', models.BooleanField()),
                ('is_active', models.BooleanField()),
                ('date_joined', models.DateTimeField()),
            ],
            options={
                'db_table': 'auth_user',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUserGroups',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'auth_user_groups',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUserUserPermissions',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'auth_user_user_permissions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CanalsL',
            fields=[
                ('objectid', models.AutoField(primary_key=True, serialize=False)),
                ('dfdd', models.CharField(blank=True, max_length=5, null=True)),
                ('rn_i_id', models.CharField(blank=True, max_length=256, null=True)),
                ('rex', models.CharField(blank=True, max_length=256, null=True)),
                ('hyp', models.SmallIntegerField(blank=True, null=True)),
                ('loc', models.SmallIntegerField(blank=True, null=True)),
                ('fun', models.SmallIntegerField(blank=True, null=True)),
                ('nvs', models.SmallIntegerField(blank=True, null=True)),
                ('length', models.FloatField(blank=True, null=True)),
                ('tr', models.CharField(blank=True, max_length=10, null=True)),
                ('longpath', models.FloatField(blank=True, null=True)),
                ('cum_len', models.FloatField(blank=True, null=True)),
                ('pente', models.FloatField(blank=True, null=True)),
                ('cgnelin', models.IntegerField(blank=True, null=True)),
                ('beglifever', models.DateTimeField(blank=True, null=True)),
                ('endlifever', models.DateTimeField(blank=True, null=True)),
                ('updat_by', models.CharField(blank=True, max_length=15, null=True)),
                ('updat_when', models.DateTimeField(blank=True, null=True)),
                ('erm_id', models.CharField(blank=True, max_length=256, null=True)),
                ('monot_z', models.SmallIntegerField(blank=True, null=True)),
                ('length_geo', models.FloatField(blank=True, null=True)),
                ('inspire_id', models.CharField(blank=True, max_length=256, null=True)),
                ('thematicid', models.CharField(blank=True, max_length=42, null=True)),
                ('object_id', models.CharField(blank=True, max_length=255, null=True)),
                ('tnode', models.CharField(blank=True, max_length=255, null=True)),
                ('strahler', models.FloatField(blank=True, null=True)),
                ('nametxtint', models.CharField(blank=True, max_length=254, null=True)),
                ('nametext', models.CharField(blank=True, max_length=254, null=True)),
                ('nextupid', models.CharField(blank=True, max_length=255, null=True)),
                ('nextdownid', models.CharField(blank=True, max_length=255, null=True)),
                ('fnode', models.CharField(blank=True, max_length=255, null=True)),
                ('catchid', models.IntegerField(blank=True, null=True)),
                ('pfafstetter', models.CharField(blank=True, max_length=255, null=True)),
                ('shape', django.contrib.gis.db.models.fields.MultiLineStringField(blank=True, dim=4, null=True, srid=900914)),
            ],
            options={
                'db_table': 'canals_l',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CanalsP',
            fields=[
                ('objectid', models.AutoField(primary_key=True, serialize=False)),
                ('dfdd', models.CharField(blank=True, max_length=5, null=True)),
                ('updat_by', models.CharField(blank=True, max_length=15, null=True)),
                ('object_id', models.CharField(blank=True, max_length=256, null=True)),
                ('beglifever', models.DateTimeField(blank=True, null=True)),
                ('endlifever', models.DateTimeField(blank=True, null=True)),
                ('updat_when', models.DateTimeField(blank=True, null=True)),
                ('area_geo', models.FloatField(blank=True, null=True)),
                ('inspire_id', models.CharField(blank=True, max_length=256, null=True)),
                ('shape', django.contrib.gis.db.models.fields.MultiPolygonField(blank=True, dim=3, null=True, srid=900914)),
            ],
            options={
                'db_table': 'canals_p',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CoastalP',
            fields=[
                ('objectid', models.AutoField(primary_key=True, serialize=False)),
                ('thematicid', models.CharField(blank=True, max_length=42, null=True)),
                ('dfdd', models.CharField(blank=True, max_length=5, null=True)),
                ('beglifever', models.DateTimeField(blank=True, null=True)),
                ('endlifever', models.DateTimeField(blank=True, null=True)),
                ('updat_by', models.CharField(blank=True, max_length=15, null=True)),
                ('updat_when', models.DateTimeField(blank=True, null=True)),
                ('object_id', models.CharField(blank=True, max_length=256, null=True)),
                ('area_geo', models.FloatField(blank=True, null=True)),
                ('inspire_id', models.CharField(blank=True, max_length=256, null=True)),
                ('basindistrict', models.CharField(blank=True, max_length=50, null=True)),
                ('shape', django.contrib.gis.db.models.fields.MultiPolygonField(blank=True, dim=4, null=True, srid=900914)),
            ],
            options={
                'db_table': 'coastal_p',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Culverts',
            fields=[
                ('objectid', models.AutoField(primary_key=True, serialize=False)),
                ('dfdd', models.CharField(blank=True, max_length=5, null=True)),
                ('updat_by', models.CharField(blank=True, max_length=15, null=True)),
                ('object_id', models.CharField(blank=True, max_length=256, null=True)),
                ('beglifever', models.DateTimeField(blank=True, null=True)),
                ('endlifever', models.DateTimeField(blank=True, null=True)),
                ('updat_when', models.DateTimeField(blank=True, null=True)),
                ('elev', models.FloatField(blank=True, null=True)),
                ('inspire_id', models.CharField(blank=True, max_length=256, null=True)),
                ('shape', django.contrib.gis.db.models.fields.PointField(blank=True, dim=4, null=True, srid=900914)),
            ],
            options={
                'db_table': 'culverts',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DitchesL',
            fields=[
                ('objectid', models.AutoField(primary_key=True, serialize=False)),
                ('dfdd', models.CharField(blank=True, max_length=5, null=True)),
                ('rn_i_id', models.CharField(blank=True, max_length=256, null=True)),
                ('rex', models.CharField(blank=True, max_length=256, null=True)),
                ('hyp', models.SmallIntegerField(blank=True, null=True)),
                ('loc', models.SmallIntegerField(blank=True, null=True)),
                ('fun', models.SmallIntegerField(blank=True, null=True)),
                ('nvs', models.SmallIntegerField(blank=True, null=True)),
                ('length', models.FloatField(blank=True, null=True)),
                ('tr', models.CharField(blank=True, max_length=10, null=True)),
                ('longpath', models.FloatField(blank=True, null=True)),
                ('cum_len', models.FloatField(blank=True, null=True)),
                ('pente', models.FloatField(blank=True, null=True)),
                ('cgnelin', models.IntegerField(blank=True, null=True)),
                ('beglifever', models.DateTimeField(blank=True, null=True)),
                ('endlifever', models.DateTimeField(blank=True, null=True)),
                ('updat_by', models.CharField(blank=True, max_length=15, null=True)),
                ('updat_when', models.DateTimeField(blank=True, null=True)),
                ('erm_id', models.CharField(blank=True, max_length=256, null=True)),
                ('monot_z', models.SmallIntegerField(blank=True, null=True)),
                ('length_geo', models.FloatField(blank=True, null=True)),
                ('inspire_id', models.CharField(blank=True, max_length=256, null=True)),
                ('thematicid', models.CharField(blank=True, max_length=42, null=True)),
                ('object_id', models.CharField(blank=True, max_length=255, null=True)),
                ('tnode', models.CharField(blank=True, max_length=255, null=True)),
                ('strahler', models.FloatField(blank=True, null=True)),
                ('nametxtint', models.CharField(blank=True, max_length=254, null=True)),
                ('nametext', models.CharField(blank=True, max_length=254, null=True)),
                ('nextupid', models.CharField(blank=True, max_length=255, null=True)),
                ('nextdownid', models.CharField(blank=True, max_length=255, null=True)),
                ('fnode', models.CharField(blank=True, max_length=255, null=True)),
                ('catchid', models.IntegerField(blank=True, null=True)),
                ('pfafstetter', models.CharField(blank=True, max_length=255, null=True)),
                ('shape', django.contrib.gis.db.models.fields.MultiLineStringField(blank=True, dim=4, null=True, srid=900914)),
            ],
            options={
                'db_table': 'ditches_l',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DitchesP',
            fields=[
                ('objectid', models.AutoField(primary_key=True, serialize=False)),
                ('dfdd', models.CharField(blank=True, max_length=5, null=True)),
                ('beglifever', models.DateTimeField(blank=True, null=True)),
                ('endlifever', models.DateTimeField(blank=True, null=True)),
                ('updat_by', models.CharField(blank=True, max_length=15, null=True)),
                ('updat_when', models.DateTimeField(blank=True, null=True)),
                ('object_id', models.CharField(blank=True, max_length=256, null=True)),
                ('area_geo', models.FloatField(blank=True, null=True)),
                ('inspire_id', models.CharField(blank=True, max_length=256, null=True)),
                ('shape', django.contrib.gis.db.models.fields.MultiPolygonField(blank=True, dim=4, null=True, srid=900914)),
            ],
            options={
                'db_table': 'ditches_p',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoAdminLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action_time', models.DateTimeField()),
                ('object_id', models.TextField(blank=True, null=True)),
                ('object_repr', models.CharField(max_length=200)),
                ('action_flag', models.SmallIntegerField()),
                ('change_message', models.TextField()),
            ],
            options={
                'db_table': 'django_admin_log',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoContentType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('app_label', models.CharField(max_length=100)),
                ('model', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'django_content_type',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoMigrations',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('app', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255)),
                ('applied', models.DateTimeField()),
            ],
            options={
                'db_table': 'django_migrations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoSession',
            fields=[
                ('session_key', models.CharField(max_length=40, primary_key=True, serialize=False)),
                ('session_data', models.TextField()),
                ('expire_date', models.DateTimeField()),
            ],
            options={
                'db_table': 'django_session',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='EuDem',
            fields=[
                ('rid', models.AutoField(primary_key=True, serialize=False)),
                ('rast', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'eu_dem',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Inlandwater',
            fields=[
                ('objectid', models.AutoField(primary_key=True, serialize=False)),
                ('thematicid', models.CharField(blank=True, max_length=42, null=True)),
                ('dfdd', models.CharField(blank=True, max_length=5, null=True)),
                ('nam', models.CharField(blank=True, max_length=256, null=True)),
                ('lan', models.CharField(blank=True, max_length=256, null=True)),
                ('rex', models.CharField(blank=True, max_length=256, null=True)),
                ('hyp', models.SmallIntegerField(blank=True, null=True)),
                ('loc', models.SmallIntegerField(blank=True, null=True)),
                ('fun', models.SmallIntegerField(blank=True, null=True)),
                ('nvs', models.SmallIntegerField(blank=True, null=True)),
                ('area', models.FloatField(blank=True, null=True)),
                ('altitude', models.FloatField(blank=True, null=True)),
                ('perimeter', models.IntegerField(blank=True, null=True)),
                ('wso_id', models.IntegerField(blank=True, null=True)),
                ('upstr_area', models.FloatField(blank=True, null=True)),
                ('system_cd', models.CharField(blank=True, max_length=1, null=True)),
                ('sea_cd', models.IntegerField(blank=True, null=True)),
                ('lke_type', models.CharField(blank=True, max_length=1, null=True)),
                ('lakid', models.CharField(blank=True, max_length=10, null=True)),
                ('beglifever', models.DateTimeField(blank=True, null=True)),
                ('endlifever', models.DateTimeField(blank=True, null=True)),
                ('updat_by', models.CharField(blank=True, max_length=15, null=True)),
                ('updat_when', models.DateTimeField(blank=True, null=True)),
                ('ccm_id', models.IntegerField(blank=True, null=True)),
                ('erm_id', models.CharField(blank=True, max_length=256, null=True)),
                ('window', models.IntegerField(blank=True, null=True)),
                ('object_id', models.CharField(blank=True, max_length=256, null=True)),
                ('lakout', models.SmallIntegerField(blank=True, null=True)),
                ('lakin', models.SmallIntegerField(blank=True, null=True)),
                ('area_geo', models.FloatField(blank=True, null=True)),
                ('inspire_id', models.CharField(blank=True, max_length=256, null=True)),
                ('shape', django.contrib.gis.db.models.fields.MultiPolygonField(blank=True, dim=4, null=True, srid=900914)),
            ],
            options={
                'db_table': 'inlandwater',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Nodes',
            fields=[
                ('objectid', models.AutoField(primary_key=True, serialize=False)),
                ('x_coord', models.FloatField(blank=True, null=True)),
                ('y_coord', models.FloatField(blank=True, null=True)),
                ('dfdd', models.CharField(blank=True, max_length=5, null=True)),
                ('wmt', models.IntegerField(blank=True, null=True)),
                ('hydronodct', models.CharField(blank=True, max_length=256, null=True)),
                ('len_tom', models.FloatField(blank=True, null=True)),
                ('num_seg', models.SmallIntegerField(blank=True, null=True)),
                ('elev', models.FloatField(blank=True, null=True)),
                ('beglifever', models.DateTimeField(blank=True, null=True)),
                ('endlifever', models.DateTimeField(blank=True, null=True)),
                ('updat_by', models.CharField(blank=True, max_length=15, null=True)),
                ('updat_when', models.DateTimeField(blank=True, null=True)),
                ('nodetype', models.CharField(blank=True, max_length=256, null=True)),
                ('eu_dam_id', models.CharField(blank=True, max_length=256, null=True)),
                ('nat_dam_id', models.CharField(blank=True, max_length=256, null=True)),
                ('dam_mars', models.CharField(blank=True, max_length=256, null=True)),
                ('dam_grand', models.CharField(blank=True, max_length=256, null=True)),
                ('dam_ecrins', models.CharField(blank=True, max_length=256, null=True)),
                ('dam_nam', models.CharField(blank=True, max_length=256, null=True)),
                ('dam_namalt', models.CharField(blank=True, max_length=256, null=True)),
                ('dam_use', models.CharField(blank=True, max_length=256, null=True)),
                ('dam_height', models.FloatField(blank=True, null=True)),
                ('dam_width', models.FloatField(blank=True, null=True)),
                ('inspire_id', models.CharField(blank=True, max_length=256, null=True)),
                ('object_id', models.CharField(blank=True, max_length=255, null=True)),
                ('shape', django.contrib.gis.db.models.fields.PointField(blank=True, dim=4, null=True, srid=900914)),
            ],
            options={
                'db_table': 'nodes',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='PlanetOsmLine',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('osm_id', models.BigIntegerField()),
                ('access', models.TextField(blank=True, null=True)),
                ('iso3166_1', models.TextField(blank=True, db_column='ISO3166-1', null=True)),
                ('addr_country', models.TextField(blank=True, db_column='addr:country', null=True)),
                ('addr_housename', models.TextField(blank=True, db_column='addr:housename', null=True)),
                ('addr_housenumber', models.TextField(blank=True, db_column='addr:housenumber', null=True)),
                ('addr_interpolation', models.TextField(blank=True, db_column='addr:interpolation', null=True)),
                ('admin_level', models.TextField(blank=True, null=True)),
                ('aerialway', models.TextField(blank=True, null=True)),
                ('aeroway', models.TextField(blank=True, null=True)),
                ('amenity', models.TextField(blank=True, null=True)),
                ('area', models.TextField(blank=True, null=True)),
                ('barrier', models.TextField(blank=True, null=True)),
                ('bicycle', models.TextField(blank=True, null=True)),
                ('brand', models.TextField(blank=True, null=True)),
                ('bridge', models.TextField(blank=True, null=True)),
                ('boundary', models.TextField(blank=True, null=True)),
                ('building', models.TextField(blank=True, null=True)),
                ('construction', models.TextField(blank=True, null=True)),
                ('covered', models.TextField(blank=True, null=True)),
                ('culvert', models.TextField(blank=True, null=True)),
                ('cutting', models.TextField(blank=True, null=True)),
                ('denomination', models.TextField(blank=True, null=True)),
                ('disused', models.TextField(blank=True, null=True)),
                ('embankment', models.TextField(blank=True, null=True)),
                ('foot', models.TextField(blank=True, null=True)),
                ('generator_source', models.TextField(blank=True, db_column='generator:source', null=True)),
                ('harbour', models.TextField(blank=True, null=True)),
                ('highway', models.TextField(blank=True, null=True)),
                ('historic', models.TextField(blank=True, null=True)),
                ('horse', models.TextField(blank=True, null=True)),
                ('intermittent', models.TextField(blank=True, null=True)),
                ('junction', models.TextField(blank=True, null=True)),
                ('landuse', models.TextField(blank=True, null=True)),
                ('layer', models.TextField(blank=True, null=True)),
                ('leisure', models.TextField(blank=True, null=True)),
                ('lock', models.TextField(blank=True, null=True)),
                ('man_made', models.TextField(blank=True, null=True)),
                ('military', models.TextField(blank=True, null=True)),
                ('motorcar', models.TextField(blank=True, null=True)),
                ('name', models.TextField(blank=True, null=True)),
                ('natural', models.TextField(blank=True, null=True)),
                ('office', models.TextField(blank=True, null=True)),
                ('oneway', models.TextField(blank=True, null=True)),
                ('operator', models.TextField(blank=True, null=True)),
                ('place', models.TextField(blank=True, null=True)),
                ('population', models.TextField(blank=True, null=True)),
                ('power', models.TextField(blank=True, null=True)),
                ('power_source', models.TextField(blank=True, null=True)),
                ('public_transport', models.TextField(blank=True, null=True)),
                ('railway', models.TextField(blank=True, null=True)),
                ('ref', models.TextField(blank=True, null=True)),
                ('religion', models.TextField(blank=True, null=True)),
                ('route', models.TextField(blank=True, null=True)),
                ('service', models.TextField(blank=True, null=True)),
                ('shop', models.TextField(blank=True, null=True)),
                ('sport', models.TextField(blank=True, null=True)),
                ('surface', models.TextField(blank=True, null=True)),
                ('toll', models.TextField(blank=True, null=True)),
                ('tourism', models.TextField(blank=True, null=True)),
                ('tower_type', models.TextField(blank=True, db_column='tower:type', null=True)),
                ('tracktype', models.TextField(blank=True, null=True)),
                ('tunnel', models.TextField(blank=True, null=True)),
                ('water', models.TextField(blank=True, null=True)),
                ('waterway', models.TextField(blank=True, null=True)),
                ('wetland', models.TextField(blank=True, null=True)),
                ('width', models.TextField(blank=True, null=True)),
                ('wood', models.TextField(blank=True, null=True)),
                ('z_order', models.IntegerField(blank=True, null=True)),
                ('way_area', models.FloatField(blank=True, null=True)),
                ('way', django.contrib.gis.db.models.fields.MultiLineStringField(srid=4326)),
            ],
            options={
                'db_table': 'planet_osm_line',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='PlanetOsmPoint',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('osm_id', models.BigIntegerField()),
                ('access', models.TextField(blank=True, null=True)),
                ('iso3166_1', models.TextField(blank=True, db_column='ISO3166-1', null=True)),
                ('addr_country', models.TextField(blank=True, db_column='addr:country', null=True)),
                ('addr_housename', models.TextField(blank=True, db_column='addr:housename', null=True)),
                ('addr_housenumber', models.TextField(blank=True, db_column='addr:housenumber', null=True)),
                ('addr_interpolation', models.TextField(blank=True, db_column='addr:interpolation', null=True)),
                ('admin_level', models.TextField(blank=True, null=True)),
                ('aerialway', models.TextField(blank=True, null=True)),
                ('aeroway', models.TextField(blank=True, null=True)),
                ('amenity', models.TextField(blank=True, null=True)),
                ('area', models.TextField(blank=True, null=True)),
                ('barrier', models.TextField(blank=True, null=True)),
                ('bicycle', models.TextField(blank=True, null=True)),
                ('brand', models.TextField(blank=True, null=True)),
                ('bridge', models.TextField(blank=True, null=True)),
                ('boundary', models.TextField(blank=True, null=True)),
                ('building', models.TextField(blank=True, null=True)),
                ('capital', models.TextField(blank=True, null=True)),
                ('construction', models.TextField(blank=True, null=True)),
                ('covered', models.TextField(blank=True, null=True)),
                ('culvert', models.TextField(blank=True, null=True)),
                ('cutting', models.TextField(blank=True, null=True)),
                ('denomination', models.TextField(blank=True, null=True)),
                ('disused', models.TextField(blank=True, null=True)),
                ('ele', models.TextField(blank=True, null=True)),
                ('embankment', models.TextField(blank=True, null=True)),
                ('foot', models.TextField(blank=True, null=True)),
                ('generator_source', models.TextField(blank=True, db_column='generator:source', null=True)),
                ('harbour', models.TextField(blank=True, null=True)),
                ('highway', models.TextField(blank=True, null=True)),
                ('historic', models.TextField(blank=True, null=True)),
                ('horse', models.TextField(blank=True, null=True)),
                ('intermittent', models.TextField(blank=True, null=True)),
                ('junction', models.TextField(blank=True, null=True)),
                ('landuse', models.TextField(blank=True, null=True)),
                ('layer', models.TextField(blank=True, null=True)),
                ('leisure', models.TextField(blank=True, null=True)),
                ('lock', models.TextField(blank=True, null=True)),
                ('man_made', models.TextField(blank=True, null=True)),
                ('military', models.TextField(blank=True, null=True)),
                ('motorcar', models.TextField(blank=True, null=True)),
                ('name', models.TextField(blank=True, null=True)),
                ('natural', models.TextField(blank=True, null=True)),
                ('office', models.TextField(blank=True, null=True)),
                ('oneway', models.TextField(blank=True, null=True)),
                ('operator', models.TextField(blank=True, null=True)),
                ('place', models.TextField(blank=True, null=True)),
                ('population', models.TextField(blank=True, null=True)),
                ('power', models.TextField(blank=True, null=True)),
                ('power_source', models.TextField(blank=True, null=True)),
                ('public_transport', models.TextField(blank=True, null=True)),
                ('railway', models.TextField(blank=True, null=True)),
                ('ref', models.TextField(blank=True, null=True)),
                ('religion', models.TextField(blank=True, null=True)),
                ('route', models.TextField(blank=True, null=True)),
                ('service', models.TextField(blank=True, null=True)),
                ('shop', models.TextField(blank=True, null=True)),
                ('sport', models.TextField(blank=True, null=True)),
                ('surface', models.TextField(blank=True, null=True)),
                ('toll', models.TextField(blank=True, null=True)),
                ('tourism', models.TextField(blank=True, null=True)),
                ('tower_type', models.TextField(blank=True, db_column='tower:type', null=True)),
                ('tunnel', models.TextField(blank=True, null=True)),
                ('water', models.TextField(blank=True, null=True)),
                ('waterway', models.TextField(blank=True, null=True)),
                ('wetland', models.TextField(blank=True, null=True)),
                ('width', models.TextField(blank=True, null=True)),
                ('wood', models.TextField(blank=True, null=True)),
                ('z_order', models.IntegerField(blank=True, null=True)),
                ('way', django.contrib.gis.db.models.fields.PointField(srid=4326)),
            ],
            options={
                'db_table': 'planet_osm_point',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='PlanetOsmPolygon',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('osm_id', models.BigIntegerField()),
                ('access', models.TextField(blank=True, null=True)),
                ('iso3166_1', models.TextField(blank=True, db_column='ISO3166-1', null=True)),
                ('addr_country', models.TextField(blank=True, db_column='addr:country', null=True)),
                ('addr_housename', models.TextField(blank=True, db_column='addr:housename', null=True)),
                ('addr_housenumber', models.TextField(blank=True, db_column='addr:housenumber', null=True)),
                ('addr_interpolation', models.TextField(blank=True, db_column='addr:interpolation', null=True)),
                ('admin_level', models.TextField(blank=True, null=True)),
                ('aerialway', models.TextField(blank=True, null=True)),
                ('aeroway', models.TextField(blank=True, null=True)),
                ('amenity', models.TextField(blank=True, null=True)),
                ('area', models.TextField(blank=True, null=True)),
                ('barrier', models.TextField(blank=True, null=True)),
                ('bicycle', models.TextField(blank=True, null=True)),
                ('brand', models.TextField(blank=True, null=True)),
                ('bridge', models.TextField(blank=True, null=True)),
                ('boundary', models.TextField(blank=True, null=True)),
                ('building', models.TextField(blank=True, null=True)),
                ('construction', models.TextField(blank=True, null=True)),
                ('covered', models.TextField(blank=True, null=True)),
                ('culvert', models.TextField(blank=True, null=True)),
                ('cutting', models.TextField(blank=True, null=True)),
                ('denomination', models.TextField(blank=True, null=True)),
                ('disused', models.TextField(blank=True, null=True)),
                ('embankment', models.TextField(blank=True, null=True)),
                ('foot', models.TextField(blank=True, null=True)),
                ('generator_source', models.TextField(blank=True, db_column='generator:source', null=True)),
                ('harbour', models.TextField(blank=True, null=True)),
                ('highway', models.TextField(blank=True, null=True)),
                ('historic', models.TextField(blank=True, null=True)),
                ('horse', models.TextField(blank=True, null=True)),
                ('intermittent', models.TextField(blank=True, null=True)),
                ('junction', models.TextField(blank=True, null=True)),
                ('landuse', models.TextField(blank=True, null=True)),
                ('layer', models.TextField(blank=True, null=True)),
                ('leisure', models.TextField(blank=True, null=True)),
                ('lock', models.TextField(blank=True, null=True)),
                ('man_made', models.TextField(blank=True, null=True)),
                ('military', models.TextField(blank=True, null=True)),
                ('motorcar', models.TextField(blank=True, null=True)),
                ('name', models.TextField(blank=True, null=True)),
                ('natural', models.TextField(blank=True, null=True)),
                ('office', models.TextField(blank=True, null=True)),
                ('oneway', models.TextField(blank=True, null=True)),
                ('operator', models.TextField(blank=True, null=True)),
                ('place', models.TextField(blank=True, null=True)),
                ('population', models.TextField(blank=True, null=True)),
                ('power', models.TextField(blank=True, null=True)),
                ('power_source', models.TextField(blank=True, null=True)),
                ('public_transport', models.TextField(blank=True, null=True)),
                ('railway', models.TextField(blank=True, null=True)),
                ('ref', models.TextField(blank=True, null=True)),
                ('religion', models.TextField(blank=True, null=True)),
                ('route', models.TextField(blank=True, null=True)),
                ('service', models.TextField(blank=True, null=True)),
                ('shop', models.TextField(blank=True, null=True)),
                ('sport', models.TextField(blank=True, null=True)),
                ('surface', models.TextField(blank=True, null=True)),
                ('toll', models.TextField(blank=True, null=True)),
                ('tourism', models.TextField(blank=True, null=True)),
                ('tower_type', models.TextField(blank=True, db_column='tower:type', null=True)),
                ('tracktype', models.TextField(blank=True, null=True)),
                ('tunnel', models.TextField(blank=True, null=True)),
                ('water', models.TextField(blank=True, null=True)),
                ('waterway', models.TextField(blank=True, null=True)),
                ('wetland', models.TextField(blank=True, null=True)),
                ('width', models.TextField(blank=True, null=True)),
                ('wood', models.TextField(blank=True, null=True)),
                ('z_order', models.IntegerField(blank=True, null=True)),
                ('way_area', models.FloatField(blank=True, null=True)),
                ('way', django.contrib.gis.db.models.fields.MultiPolygonField(srid=4326)),
            ],
            options={
                'db_table': 'planet_osm_polygon',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='PlanetOsmRoads',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('osm_id', models.BigIntegerField()),
                ('access', models.TextField(blank=True, null=True)),
                ('iso3166_1', models.TextField(blank=True, db_column='ISO3166-1', null=True)),
                ('addr_country', models.TextField(blank=True, db_column='addr:country', null=True)),
                ('addr_housename', models.TextField(blank=True, db_column='addr:housename', null=True)),
                ('addr_housenumber', models.TextField(blank=True, db_column='addr:housenumber', null=True)),
                ('addr_interpolation', models.TextField(blank=True, db_column='addr:interpolation', null=True)),
                ('admin_level', models.TextField(blank=True, null=True)),
                ('aerialway', models.TextField(blank=True, null=True)),
                ('aeroway', models.TextField(blank=True, null=True)),
                ('amenity', models.TextField(blank=True, null=True)),
                ('area', models.TextField(blank=True, null=True)),
                ('barrier', models.TextField(blank=True, null=True)),
                ('bicycle', models.TextField(blank=True, null=True)),
                ('brand', models.TextField(blank=True, null=True)),
                ('bridge', models.TextField(blank=True, null=True)),
                ('boundary', models.TextField(blank=True, null=True)),
                ('building', models.TextField(blank=True, null=True)),
                ('construction', models.TextField(blank=True, null=True)),
                ('covered', models.TextField(blank=True, null=True)),
                ('culvert', models.TextField(blank=True, null=True)),
                ('cutting', models.TextField(blank=True, null=True)),
                ('denomination', models.TextField(blank=True, null=True)),
                ('disused', models.TextField(blank=True, null=True)),
                ('embankment', models.TextField(blank=True, null=True)),
                ('foot', models.TextField(blank=True, null=True)),
                ('generator_source', models.TextField(blank=True, db_column='generator:source', null=True)),
                ('harbour', models.TextField(blank=True, null=True)),
                ('highway', models.TextField(blank=True, null=True)),
                ('historic', models.TextField(blank=True, null=True)),
                ('horse', models.TextField(blank=True, null=True)),
                ('intermittent', models.TextField(blank=True, null=True)),
                ('junction', models.TextField(blank=True, null=True)),
                ('landuse', models.TextField(blank=True, null=True)),
                ('layer', models.TextField(blank=True, null=True)),
                ('leisure', models.TextField(blank=True, null=True)),
                ('lock', models.TextField(blank=True, null=True)),
                ('man_made', models.TextField(blank=True, null=True)),
                ('military', models.TextField(blank=True, null=True)),
                ('motorcar', models.TextField(blank=True, null=True)),
                ('name', models.TextField(blank=True, null=True)),
                ('natural', models.TextField(blank=True, null=True)),
                ('office', models.TextField(blank=True, null=True)),
                ('oneway', models.TextField(blank=True, null=True)),
                ('operator', models.TextField(blank=True, null=True)),
                ('place', models.TextField(blank=True, null=True)),
                ('population', models.TextField(blank=True, null=True)),
                ('power', models.TextField(blank=True, null=True)),
                ('power_source', models.TextField(blank=True, null=True)),
                ('public_transport', models.TextField(blank=True, null=True)),
                ('railway', models.TextField(blank=True, null=True)),
                ('ref', models.TextField(blank=True, null=True)),
                ('religion', models.TextField(blank=True, null=True)),
                ('route', models.TextField(blank=True, null=True)),
                ('service', models.TextField(blank=True, null=True)),
                ('shop', models.TextField(blank=True, null=True)),
                ('sport', models.TextField(blank=True, null=True)),
                ('surface', models.TextField(blank=True, null=True)),
                ('toll', models.TextField(blank=True, null=True)),
                ('tourism', models.TextField(blank=True, null=True)),
                ('tower_type', models.TextField(blank=True, db_column='tower:type', null=True)),
                ('tracktype', models.TextField(blank=True, null=True)),
                ('tunnel', models.TextField(blank=True, null=True)),
                ('water', models.TextField(blank=True, null=True)),
                ('waterway', models.TextField(blank=True, null=True)),
                ('wetland', models.TextField(blank=True, null=True)),
                ('width', models.TextField(blank=True, null=True)),
                ('wood', models.TextField(blank=True, null=True)),
                ('z_order', models.IntegerField(blank=True, null=True)),
                ('way_area', models.FloatField(blank=True, null=True)),
                ('way', django.contrib.gis.db.models.fields.MultiLineStringField(srid=4326)),
            ],
            options={
                'db_table': 'planet_osm_roads',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='PlPlot3857',
            fields=[
                ('fid', models.AutoField(primary_key=True, serialize=False)),
                ('gml_id', models.CharField(blank=True, null=True)),
                ('id_dzialki', models.CharField(blank=True, max_length=22, null=True)),
                ('numer_dzialki', models.CharField(blank=True, max_length=8, null=True)),
                ('numer_obrebu', models.IntegerField(blank=True, null=True)),
                ('numer_jednostki', models.CharField(blank=True, max_length=8, null=True)),
                ('nazwa_obrebu', models.CharField(blank=True, max_length=24, null=True)),
                ('nazwa_gminy', models.CharField(blank=True, max_length=29, null=True)),
                ('data', models.CharField(blank=True, max_length=26, null=True)),
                ('geom', django.contrib.gis.db.models.fields.MultiPolygonField(blank=True, null=True, srid=3857)),
            ],
            options={
                'db_table': 'pl_plot3857',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='PlPlot4326',
            fields=[
                ('fid', models.AutoField(primary_key=True, serialize=False)),
                ('gml_id', models.CharField(blank=True, null=True)),
                ('id_dzialki', models.CharField(blank=True, max_length=22, null=True)),
                ('numer_dzialki', models.CharField(blank=True, max_length=8, null=True)),
                ('numer_obrebu', models.IntegerField(blank=True, null=True)),
                ('numer_jednostki', models.CharField(blank=True, max_length=8, null=True)),
                ('nazwa_obrebu', models.CharField(blank=True, max_length=24, null=True)),
                ('nazwa_gminy', models.CharField(blank=True, max_length=29, null=True)),
                ('data', models.CharField(blank=True, max_length=26, null=True)),
                ('geom', django.contrib.gis.db.models.fields.MultiPolygonField(blank=True, null=True, srid=4326)),
            ],
            options={
                'db_table': 'pl_plot4326',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='PlRiver3857',
            fields=[
                ('fid', models.AutoField(primary_key=True, serialize=False)),
                ('rzeki_r_field', models.FloatField(blank=True, db_column='rzeki_r_', null=True)),
                ('rzeki_r_id', models.FloatField(blank=True, null=True)),
                ('id_hyd_r', models.FloatField(blank=True, null=True)),
                ('rzad', models.IntegerField(blank=True, null=True)),
                ('dlug', models.FloatField(blank=True, null=True)),
                ('id_hyd_rc', models.FloatField(blank=True, null=True)),
                ('naz_rzeki', models.CharField(blank=True, max_length=100, null=True)),
                ('geom', django.contrib.gis.db.models.fields.MultiLineStringField(blank=True, null=True, srid=3857)),
                ('r_width', models.FloatField()),
            ],
            options={
                'db_table': 'pl_river3857',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='PlRiver4326',
            fields=[
                ('fid', models.AutoField(primary_key=True, serialize=False)),
                ('rzeki_r_field', models.FloatField(blank=True, db_column='rzeki_r_', null=True)),
                ('rzeki_r_id', models.FloatField(blank=True, null=True)),
                ('id_hyd_r', models.FloatField(blank=True, null=True)),
                ('rzad', models.IntegerField(blank=True, null=True)),
                ('dlug', models.FloatField(blank=True, null=True)),
                ('id_hyd_rc', models.FloatField(blank=True, null=True)),
                ('naz_rzeki', models.CharField(blank=True, max_length=100, null=True)),
                ('geom', django.contrib.gis.db.models.fields.MultiLineStringField(blank=True, null=True, srid=4326)),
            ],
            options={
                'db_table': 'pl_river4326',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='PlRiver92',
            fields=[
                ('fid', models.AutoField(primary_key=True, serialize=False)),
                ('rzeki_r_field', models.FloatField(blank=True, db_column='rzeki_r_', null=True)),
                ('rzeki_r_id', models.FloatField(blank=True, null=True)),
                ('id_hyd_r', models.FloatField(blank=True, null=True)),
                ('rzad', models.IntegerField(blank=True, null=True)),
                ('dlug', models.FloatField(blank=True, null=True)),
                ('id_hyd_rc', models.FloatField(blank=True, null=True)),
                ('naz_rzeki', models.CharField(blank=True, max_length=100, null=True)),
                ('geom', django.contrib.gis.db.models.fields.MultiLineStringField(blank=True, null=True, srid=900915)),
            ],
            options={
                'db_table': 'pl_river92',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Riverbasins',
            fields=[
                ('objectid', models.AutoField(primary_key=True, serialize=False)),
                ('beglifever', models.DateTimeField(blank=True, null=True)),
                ('endlifever', models.DateTimeField(blank=True, null=True)),
                ('updat_by', models.CharField(blank=True, max_length=15, null=True)),
                ('updat_when', models.DateTimeField(blank=True, null=True)),
                ('object_id', models.CharField(blank=True, max_length=256, null=True)),
                ('area_geo', models.FloatField(blank=True, null=True)),
                ('inspire_id', models.CharField(blank=True, max_length=256, null=True)),
                ('shape', django.contrib.gis.db.models.fields.MultiPolygonField(blank=True, dim=4, null=True, srid=900914)),
            ],
            options={
                'db_table': 'riverbasins',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='RiverNetL',
            fields=[
                ('objectid', models.AutoField(primary_key=True, serialize=False)),
                ('dfdd', models.CharField(blank=True, max_length=5, null=True)),
                ('rn_i_id', models.CharField(blank=True, max_length=256, null=True)),
                ('rex', models.CharField(blank=True, max_length=256, null=True)),
                ('hyp', models.SmallIntegerField(blank=True, null=True)),
                ('loc', models.SmallIntegerField(blank=True, null=True)),
                ('fun', models.SmallIntegerField(blank=True, null=True)),
                ('nvs', models.SmallIntegerField(blank=True, null=True)),
                ('length', models.FloatField(blank=True, null=True)),
                ('tr', models.CharField(blank=True, max_length=10, null=True)),
                ('longpath', models.FloatField(blank=True, null=True)),
                ('cum_len', models.FloatField(blank=True, null=True)),
                ('pente', models.FloatField(blank=True, null=True)),
                ('cgnelin', models.IntegerField(blank=True, null=True)),
                ('beglifever', models.DateTimeField(blank=True, null=True)),
                ('endlifever', models.DateTimeField(blank=True, null=True)),
                ('updat_by', models.CharField(blank=True, max_length=15, null=True)),
                ('updat_when', models.DateTimeField(blank=True, null=True)),
                ('erm_id', models.CharField(blank=True, max_length=256, null=True)),
                ('mc', models.SmallIntegerField(blank=True, null=True)),
                ('monot_z', models.SmallIntegerField(blank=True, null=True)),
                ('length_geo', models.FloatField(blank=True, null=True)),
                ('inspire_id', models.CharField(blank=True, max_length=256, null=True)),
                ('thematicid', models.CharField(blank=True, max_length=42, null=True)),
                ('object_id', models.CharField(blank=True, max_length=255, null=True)),
                ('tnode', models.CharField(blank=True, max_length=255, null=True)),
                ('strahler', models.FloatField(blank=True, null=True)),
                ('nametxtint', models.CharField(blank=True, max_length=254, null=True)),
                ('nametext', models.CharField(blank=True, max_length=254, null=True)),
                ('nextupid', models.CharField(blank=True, max_length=255, null=True)),
                ('nextdownid', models.CharField(blank=True, max_length=255, null=True)),
                ('fnode', models.CharField(blank=True, max_length=255, null=True)),
                ('catchid', models.IntegerField(blank=True, null=True)),
                ('pfafstetter', models.CharField(blank=True, max_length=255, null=True)),
                ('shape', django.contrib.gis.db.models.fields.MultiLineStringField(blank=True, dim=4, null=True, srid=900914)),
            ],
            options={
                'db_table': 'river_net_l',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='RiverNetP',
            fields=[
                ('objectid', models.AutoField(primary_key=True, serialize=False)),
                ('dfdd', models.CharField(blank=True, max_length=5, null=True)),
                ('beglifever', models.DateTimeField(blank=True, null=True)),
                ('endlifever', models.DateTimeField(blank=True, null=True)),
                ('updat_by', models.CharField(blank=True, max_length=15, null=True)),
                ('updat_when', models.DateTimeField(blank=True, null=True)),
                ('object_id', models.CharField(blank=True, max_length=256, null=True)),
                ('area_geo', models.FloatField(blank=True, null=True)),
                ('inspire_id', models.CharField(blank=True, max_length=256, null=True)),
                ('shape', django.contrib.gis.db.models.fields.MultiPolygonField(blank=True, dim=4, null=True, srid=900914)),
            ],
            options={
                'db_table': 'river_net_p',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TransitP',
            fields=[
                ('objectid', models.AutoField(primary_key=True, serialize=False)),
                ('thematicid', models.CharField(blank=True, max_length=42, null=True)),
                ('dfdd', models.CharField(blank=True, max_length=5, null=True)),
                ('beglifever', models.DateTimeField(blank=True, null=True)),
                ('endlifever', models.DateTimeField(blank=True, null=True)),
                ('updat_by', models.CharField(blank=True, max_length=15, null=True)),
                ('updat_when', models.DateTimeField(blank=True, null=True)),
                ('elev', models.FloatField(blank=True, null=True)),
                ('object_id', models.CharField(blank=True, max_length=256, null=True)),
                ('area_geo', models.FloatField(blank=True, null=True)),
                ('inspire_id', models.CharField(blank=True, max_length=256, null=True)),
                ('shape', django.contrib.gis.db.models.fields.MultiPolygonField(blank=True, dim=4, null=True, srid=900914)),
            ],
            options={
                'db_table': 'transit_p',
                'managed': False,
            },
        ),
    ]
